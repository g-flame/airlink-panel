name: Build and Deploy Airlink Panel Frontend

on:
  push:
    branches:
      - demo-branch
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build-ts

      - name: Build Tailwind CSS
        run: npx tailwindcss -i ./public/tw.conf -o ./public/styles.css --minify

      - name: Create static site structure
        run: |
          mkdir -p static-site
          
          # Copy all public assets
          cp -r public/* static-site/
          
          # Ensure CSS is in the right place
          cp public/styles.css static-site/styles.css

      - name: Generate static HTML from EJS templates
        run: |
          # Create build script for EJS conversion
          cat > build-static.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const ejs = require('ejs');
          
          // Mock data for rendering templates
          const mockData = {
            title: 'Airlink Panel - Game Server Management',
            user: null,
            page: 'home',
            version: '1.0.0',
            isDev: false,
            csrfToken: 'static-build-token',
            // Add any other variables your templates might need
            servers: [],
            nodes: [],
            stats: {},
            settings: {}
          };
          
          // Template mappings (EJS file -> output HTML file)
          const templateMappings = [
            // Main pages
            { input: 'views/index.ejs', output: 'static-site/index.html' },
            { input: 'views/auth/login.ejs', output: 'static-site/login.html' },
            { input: 'views/auth/register.ejs', output: 'static-site/register.html' },
            { input: 'views/user/dashboard.ejs', output: 'static-site/dashboard.html' },
            { input: 'views/user/account.ejs', output: 'static-site/account.html' },
            { input: 'views/api/documentation.ejs', output: 'static-site/api-docs.html' },
            
            // Admin pages
            { input: 'views/admin/overview/overview.ejs', output: 'static-site/admin/index.html' },
            { input: 'views/admin/servers/servers.ejs', output: 'static-site/admin/servers.html' },
            { input: 'views/admin/nodes/nodes.ejs', output: 'static-site/admin/nodes.html' },
            { input: 'views/admin/users/users.ejs', output: 'static-site/admin/users.html' },
            { input: 'views/admin/settings/settings.ejs', output: 'static-site/admin/settings.html' },
            { input: 'views/admin/analytics/analytics.ejs', output: 'static-site/admin/analytics.html' },
            { input: 'views/admin/apikeys/apikeys.ejs', output: 'static-site/admin/apikeys.html' },
            { input: 'views/admin/addons/addons.ejs', output: 'static-site/admin/addons.html' },
          ];
          
          // Ensure directories exist
          const ensureDir = (filePath) => {
            const dir = path.dirname(filePath);
            if (!fs.existsSync(dir)) {
              fs.mkdirSync(dir, { recursive: true });
            }
          };
          
          // Process each template
          templateMappings.forEach(({ input, output }) => {
            try {
              if (fs.existsSync(input)) {
                console.log(`Processing ${input} -> ${output}`);
                
                ensureDir(output);
                
                // Read and render template
                const template = fs.readFileSync(input, 'utf8');
                const html = ejs.render(template, mockData, {
                  filename: input,
                  views: ['views', 'views/components'],
                  root: process.cwd()
                });
                
                fs.writeFileSync(output, html);
                console.log(`‚úì Generated ${output}`);
              } else {
                console.log(`‚ö† Template not found: ${input}`);
              }
            } catch (error) {
              console.error(`‚úó Error processing ${input}:`, error.message);
            }
          });
          
          // Create a simple index page if main index fails
          if (!fs.existsSync('static-site/index.html')) {
            const fallbackHTML = `
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Airlink Panel</title>
              <link rel="stylesheet" href="styles.css">
              <link rel="icon" type="image/x-icon" href="favicon.ico">
          </head>
          <body class="bg-gray-900 text-white">
              <div class="min-h-screen flex items-center justify-center">
                  <div class="text-center">
                      <h1 class="text-4xl font-bold mb-4">Airlink Panel</h1>
                      <p class="text-gray-300 mb-8">Game Server Management Platform</p>
                      <div class="space-x-4">
                          <a href="login.html" class="bg-blue-600 hover:bg-blue-700 px-6 py-2 rounded">Login</a>
                          <a href="register.html" class="bg-green-600 hover:bg-green-700 px-6 py-2 rounded">Register</a>
                          <a href="api-docs.html" class="bg-purple-600 hover:bg-purple-700 px-6 py-2 rounded">API Docs</a>
                      </div>
                  </div>
              </div>
          </body>
          </html>`;
            fs.writeFileSync('static-site/index.html', fallbackHTML);
            console.log('‚úì Created fallback index.html');
          }
          
          console.log('\nüìÅ Generated static site structure:');
          const listFiles = (dir, indent = '') => {
            if (!fs.existsSync(dir)) return;
            const files = fs.readdirSync(dir, { withFileTypes: true });
            files.forEach(file => {
              console.log(`${indent}${file.isDirectory() ? 'üìÅ' : 'üìÑ'} ${file.name}`);
              if (file.isDirectory()) {
                listFiles(path.join(dir, file.name), indent + '  ');
              }
            });
          };
          listFiles('static-site');
          EOF
          
          # Run the build script
          node build-static.js

      - name: Fix relative paths for static hosting
        run: |
          # Create script to fix asset paths
          cat > fix-paths.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          const fixPaths = (dir) => {
            if (!fs.existsSync(dir)) return;
            
            const files = fs.readdirSync(dir, { withFileTypes: true });
            
            files.forEach(file => {
              const fullPath = path.join(dir, file.name);
              
              if (file.isDirectory()) {
                fixPaths(fullPath);
              } else if (file.name.endsWith('.html')) {
                let content = fs.readFileSync(fullPath, 'utf8');
                
                // Fix common asset paths
                content = content.replace(/src="\/javascript\//g, 'src="./javascript/');
                content = content.replace(/src="\/js\//g, 'src="./js/');
                content = content.replace(/href="\/styles\.css"/g, 'href="./styles.css"');
                content = content.replace(/src="\/assets\//g, 'src="./assets/');
                content = content.replace(/href="\/favicon\.ico"/g, 'href="./favicon.ico"');
                
                fs.writeFileSync(fullPath, content);
              }
            });
          };
          
          fixPaths('static-site');
          console.log('‚úì Fixed asset paths for static hosting');
          EOF
          
          node fix-paths.js

      - name: Validate build output
        run: |
          echo "üìä Build Summary:"
          echo "=================="
          echo "HTML files: $(find static-site -name '*.html' | wc -l)"
          echo "CSS files: $(find static-site -name '*.css' | wc -l)"
          echo "JS files: $(find static-site -name '*.js' | wc -l)"
          echo "Image files: $(find static-site -name '*.png' -o -name '*.jpg' -o -name '*.ico' | wc -l)"
          echo "Total files: $(find static-site -type f | wc -l)"
          echo ""
          echo "üìÅ Directory structure:"
          ls -la static-site/
          
          # Check if main files exist
          if [ ! -f "static-site/index.html" ]; then
            echo "‚ùå Missing index.html"
            exit 1
          fi
          
          if [ ! -f "static-site/styles.css" ]; then
            echo "‚ùå Missing styles.css"
            exit 1
          fi
          
          echo "‚úÖ Build validation passed"

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./static-site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
